{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Online Java Compiler\
// Use this editor to write, compile and run your Java code online\
import java.util.*;\
class HashNode<K,V>\
\{\
    K key;\
    V value;\
    final int hashcode;\
    HashNode<K,V> next;\
    \
    HashNode(K key, V Value, int hashcode)\
    \{\
        this.key = key;\
        this.value = value;\
          this.hashcode = hashcode;\
    \}\
\}\
\
public class Map<K,V> \{\
    \
    private int numBuckets;\
    private int size;\
    private ArrayList<HashNode<K,V>> bucketArray;\
    public Map()\
    \{\
        bucketArray = new ArrayList<>();\
        numBuckets = 10;\
        size = 0;\
\
        for (int i = 0; i < numBuckets; i++)\
            bucketArray.add(null);\
    \}\
    \
    public int size()\{return size;\}\
    public boolean isEmpty()\{return size==0;\}\
    private final int hashcode(K key)\
    \{\
        return Objects.hashCode(key);\
    \}\
    \
    private int getBucketIndex(K key)\
    \{\
        int hashcode=hashcode(key);\
        int index=hashcode%numBuckets;\
        index=(index<0)?-1*index:index;\
        return index;\
    \}\
    \
    //remove key\
    public V remove(K key)\
    \{\
        int bucketIndex=getBucketIndex(key);\
        int hashcode=hashcode(key);\
        \
        HashNode<K,V> head =bucketArray.get(bucketIndex);\
        HashNode<K,V> prev=null;\
        \
        while(head!=null)\
        \{\
            if(head.key.equals(key) && head.hashcode==hashcode)\
            break;\
            prev=head;\
            head=head.next;\
        \}\
        if(head==null)\
        return null;\
        \
        size--;\
        \
        if (prev != null)\
            prev.next = head.next;\
        else\
            bucketArray.set(bucketIndex, head.next);\
\
        return head.value;\
        \
        \
    \}\
    \
    //get\
    \
    public V get(K key)\
    \{\
        int bucketIndex=getBucketIndex(key);\
        int hashcode=hashcode(key);\
        \
        HashNode<K,V> head =bucketArray.get(bucketIndex);\
        while(head!=null)\
        \{\
            if(head.key.equals(key) && head.hashcode==hashcode)\
            return head.value;\
            head=head.next;\
        \}\
        return null;\
    \}\
    \
    // add key\
    \
    public void add(K key, V value)\
    \{\
        int bucketIndex=getBucketIndex(key);\
        int hashcode=hashcode(key);\
        \
        HashNode<K,V> head =bucketArray.get(bucketIndex);\
        while(head!=null)\
        \{\
            if(head.key.equals(key) && head.hashcode==hashcode)\
            return ;\
            head=head.next;\
        \}\
        \
        size++;\
        head = bucketArray.get(bucketIndex);\
        HashNode<K,V> newNode=new HashNode<K,V>(key,value,hashcode);\
        newNode.next=head;\
        bucketArray.set(bucketIndex,newNode);\
        \
        //load factor >0.7\
        if((1.0 * size) / numBuckets >= 0.7)\
        \{\
            ArrayList<HashNode<K,V>> temp=bucketArray;\
            bucketArray = new ArrayList<>();\
            numBuckets = 2 * numBuckets;\
            size = 0;\
            \
            for (int i = 0; i < numBuckets; i++)\
            bucketArray.add(null);\
            for(HashNode<K,V> node:temp)\
            \{\
                while(node!=null)\
                \{\
                    add(node.key,node.value);\
                    node=node.next;\
                \}\
            \}\
        \}\
    \}\
    \
    \
    \
    public static void main(String[] args)\
    \{\
        Map<String, Integer> map = new Map<>();\
        map.add("this", 1);\
        map.add("hiii", 15);\
        map.add("coder", 2);\
        map.add("this", 24);\
        map.add("hi", 5);\
        System.out.println(map.size());\
       // System.out.println(map.remove("hiii"));\
        System.out.println(map.size());\
        System.out.println(map.isEmpty());\
    \}\
\}}