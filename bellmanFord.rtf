{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Online Java Compiler\
// Use this editor to write, compile and run your Java code online\
\
class Graph \{\
    \
    class Edge \{\
        int src, dest, weight;\
        Edge() \{ src = dest = weight = 0; \}\
    \};\
\
    int V, E;\
    Edge edge[];\
    \
    Graph(int v, int e)\
    \{\
        V = v;\
        E = e;\
        edge = new Edge[e];\
        for (int i = 0; i < e; ++i)\
            edge[i] = new Edge();\
    \}\
    \
    void BellmanFord(Graph g, int source)\{\
        int V=g.V;\
        int E=g.E;\
        int dist[]=new int[V];\
        \
        for(int i=0;i<V;i++)\
        dist[i]=Integer.MAX_VALUE;\
        dist[0]=0;\
        \
        for(int i=0;i<V;i++)\
        \{\
            for(int j=0;j<E;j++)\
            \{\
                int u=g.edge[j].src;\
                int v=g.edge[j].dest;\
                int weight=g.edge[j].weight;\
                if(dist[u]!=Integer.MAX_VALUE && dist[u]+weight<dist[v])\
                dist[v]=dist[u]+weight;\
            \}\
            \
        \}\
        \
        \
        //check negative cycle\
        \
        for(int j=0;j<E;j++)\
            \{\
                int u=g.edge[j].src;\
                int v=g.edge[j].dest;\
                int weight=g.edge[j].weight;\
                if(dist[u]!=Integer.MAX_VALUE && dist[u]+weight<dist[v])\
               System.out.println("Negative CYCLES");\
            \}\
        for(int i=0;i<V;i++)\
        System.out.println("vertex: "+i+": distance"+dist[i]);\
        \
    \}\
    public static void main(String[] args) \{\
        int V = 5; // Number of vertices in graph\
        int E = 8; // Number of edges in graph\
\
        Graph graph = new Graph(V, E);\
\
        // add edge 0-1 (or A-B in above figure)\
        graph.edge[0].src = 0;\
        graph.edge[0].dest = 1;\
        graph.edge[0].weight = -1;\
\
        // add edge 0-2 (or A-C in above figure)\
        graph.edge[1].src = 0;\
        graph.edge[1].dest = 2;\
        graph.edge[1].weight = 4;\
\
        // add edge 1-2 (or B-C in above figure)\
        graph.edge[2].src = 1;\
        graph.edge[2].dest = 2;\
        graph.edge[2].weight = 3;\
\
        // add edge 1-3 (or B-D in above figure)\
        graph.edge[3].src = 1;\
        graph.edge[3].dest = 3;\
        graph.edge[3].weight = 2;\
\
        // add edge 1-4 (or B-E in above figure)\
        graph.edge[4].src = 1;\
        graph.edge[4].dest = 4;\
        graph.edge[4].weight = 2;\
\
        // add edge 3-2 (or D-C in above figure)\
        graph.edge[5].src = 3;\
        graph.edge[5].dest = 2;\
        graph.edge[5].weight = 5;\
\
        // add edge 3-1 (or D-B in above figure)\
        graph.edge[6].src = 3;\
        graph.edge[6].dest = 1;\
        graph.edge[6].weight = 1;\
\
        // add edge 4-3 (or E-D in above figure)\
        graph.edge[7].src = 4;\
        graph.edge[7].dest = 3;\
        graph.edge[7].weight = -3;\
        \
          // Function call\
        graph.BellmanFord(graph, 0);\
    \}\
\}}