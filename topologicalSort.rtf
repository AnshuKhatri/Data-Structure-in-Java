{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import java.util.*;\
class Graph\
\{\
    int vertices;\
    LinkedList<Integer> adj[];\
    \
    Graph(int v)\
    \{\
        vertices=v;\
        adj=new LinkedList[v];\
        for(int i=0;i<v;i++)\
        adj[i]=new LinkedList();\
    \}\
    \
    void addEdge(int u,int v)\
    \{\
        adj[u].add(v);\
    \}\
    \
    void topologicalSort()\
    \{\
        \
      // get the indegrees of ech vertex\
      int count=0;\
      int[] inDegree=new int[vertices];\
      \
      for(int i=0;i<vertices;i++)\
      \{\
          for(int j=0;j<adj[i].size();j++)\
          \{\
              inDegree[adj[i].get(j)]++;\
          \}\
      \}\
      \
      Queue<Integer> q=new LinkedList<>();\
      \
     for (int i = 0; i < vertices; ++i) \{\
            if (inDegree[i] == 0)\
                q.add(i);\
        \}\
        \
        while(!q.isEmpty())\
        \{\
            int current=q.poll();\
            System.out.println(current+",");\
            count++;\
            for(int j=0;j<adj[current].size();j++)\
            \{\
                int u=adj[current].get(j);\
                inDegree[u]--;\
               if(inDegree[u]==0)\
               q.add(u);\
            \}\
        \}\
      \
      if(count!=vertices)\
      System.out.println("loop present");\
      \
    \}\
  \
    \
  \
    public static void main(String[] args)\
    \{\
        // Create a graph given in the above diagram\
        Graph g = new Graph(6);\
        g.addEdge(5, 2);\
        g.addEdge(5, 0);\
        g.addEdge(4, 0);\
        g.addEdge(4, 1);\
        g.addEdge(2, 3);\
        g.addEdge(3, 1);\
\
        System.out.println(\
            "Following is a Topological Sort of the given graph");\
        g.topologicalSort();\
    \}\
\}}